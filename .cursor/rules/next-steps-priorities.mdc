---
description:
globs:
alwaysApply: false
---
# Prochaines √âtapes - Instructions Prioritaires

## üéØ Priorit√© 1 : Tests de Compatibilit√© R√©els

### Objectif Imm√©diat
Valider le fonctionnement sur appareils r√©els des applications d'exemple.

### Applications √† Tester
1. **[example/AdvancedPlayerExample.tsx](mdc:example/AdvancedPlayerExample.tsx)**
   - Interface compl√®te avec VideoControls
   - S√©lection de sources multiples
   - Mode plein √©cran

2. **[example/StreamingExamples.tsx](mdc:example/StreamingExamples.tsx)**
   - Tests de formats vari√©s
   - Validation headers HTTP
   - Interface de s√©lection

### Plateformes Cibles
- **Android** : √âmulateur API 21+ puis appareil physique
- **iOS** : Simulateur iOS 12+ puis appareil physique

### Crit√®res de Validation
- [ ] Application se lance sans crash
- [ ] Lecture vid√©o MP4 fonctionnelle
- [ ] Streaming HLS op√©rationnel
- [ ] Contr√¥les UI r√©actifs
- [ ] Headers HTTP valid√©s avec API r√©elle

### Livrables
- Rapport de tests dans `test-results/device-compatibility.md`
- Screenshots/vid√©os de d√©monstration
- Liste des bugs identifi√©s avec priorit√©s

## üéØ Priorit√© 2 : Finalisation Interface Utilisateur

### Composants √† Cr√©er

#### ProgressBar Standalone
**Fichier** : `src/components/ProgressBar.tsx`

```typescript
interface ProgressBarProps {
  currentTime: number;
  duration: number;
  buffered?: number;
  onSeek: (time: number) => void;
  onSeekStart?: () => void;
  onSeekEnd?: () => void;
  theme?: 'dark' | 'light';
  height?: number;
  showThumbnails?: boolean;
}
```

**Fonctionnalit√©s requises** :
- Interaction tactile (tap, drag)
- Affichage du buffer
- Seeking pr√©cis avec feedback visuel
- Animations fluides
- Support des gestes

#### VolumeControl Avanc√©
**Fichier** : `src/components/VolumeControl.tsx`

```typescript
interface VolumeControlProps {
  volume: number;
  isMuted: boolean;
  onVolumeChange: (volume: number) => void;
  onMuteToggle: () => void;
  orientation?: 'horizontal' | 'vertical';
  theme?: 'dark' | 'light';
  showLabel?: boolean;
}
```

#### Hook useVideoControls
**Fichier** : `src/hooks/useVideoControls.ts`

```typescript
interface UseVideoControlsOptions {
  autoHideDelay?: number;
  enableGestures?: boolean;
  persistPreferences?: boolean;
}

interface UseVideoControlsReturn {
  controlsVisible: boolean;
  showControls: () => void;
  hideControls: () => void;
  toggleControls: () => void;
  resetAutoHide: () => void;
}
```

### Am√©liorations VideoControls
**Fichier** : [src/components/VideoControls.tsx](mdc:src/components/VideoControls.tsx)

**√Ä ajouter** :
- Auto-hide apr√®s 3s d'inactivit√©
- Gestes swipe pour seek rapide
- Animations de transition am√©lior√©es
- Configuration des contr√¥les visibles

### Exports et Documentation
- Mettre √† jour [src/components/index.ts](mdc:src/components/index.ts)
- Ajouter exports dans [src/index.ts](mdc:src/index.ts)
- Documenter les nouvelles interfaces

## üéØ Priorit√© 3 : Gestion Pistes Audio/Sous-titres

### Fonctionnalit√©s √† Impl√©menter

#### D√©tection des Pistes
**Modules natifs √† √©tendre** :
- [android/src/main/java/com/vlcpro/VLCPlayerView.java](mdc:android/src/main/java/com/vlcpro/VLCPlayerView.java)
- [ios/VLCPro/VLCPlayerView.swift](mdc:ios/VLCPro/VLCPlayerView.swift)

**M√©thodes √† ajouter** :
```typescript
// Nouvelles m√©thodes VLCPlayer
getAudioTracks(): Promise<AudioTrack[]>
getSubtitleTracks(): Promise<SubtitleTrack[]>
setAudioTrack(trackId: number): Promise<void>
setSubtitleTrack(trackId: number): Promise<void>
```

#### Interface de S√©lection
**Composant √† cr√©er** : `src/components/TrackSelector.tsx`

```typescript
interface TrackSelectorProps {
  audioTracks: AudioTrack[];
  subtitleTracks: SubtitleTrack[];
  selectedAudioTrack?: number;
  selectedSubtitleTrack?: number;
  onAudioTrackSelect: (trackId: number) => void;
  onSubtitleTrackSelect: (trackId: number) => void;
  visible: boolean;
  onClose: () => void;
}
```

#### Types √† √âtendre
**Fichier** : [src/types/Media.ts](mdc:src/types/Media.ts)

**Interfaces existantes √† utiliser** :
- `AudioTrack` ‚úÖ (d√©j√† d√©finie)
- `SubtitleTrack` ‚úÖ (d√©j√† d√©finie)

### Support des Formats de Sous-titres
- **SRT** : Format de base
- **VTT** : WebVTT pour streaming
- **ASS** : Sous-titres avanc√©s

## üìã Checklist de Validation

### Avant de Commencer
- [ ] Lire [PLANNING.md](mdc:PLANNING.md) enti√®rement
- [ ] Ex√©cuter `npm test` (doit afficher 65/65)
- [ ] Ex√©cuter `node scripts/test-streaming.js` (100% r√©ussite)
- [ ] Comprendre l'architecture dans les r√®gles Cursor

### Apr√®s Chaque Session
- [ ] Tests de r√©gression passants
- [ ] [PLANNING.md](mdc:PLANNING.md) mis √† jour
- [ ] Nouveaux accomplissements document√©s
- [ ] Progression incr√©ment√©e

### Validation Finale
- [ ] Application exemple fonctionnelle sur √©mulateur
- [ ] Interface utilisateur compl√®te et responsive
- [ ] Documentation √† jour
- [ ] Tests de compatibilit√© valid√©s

## üö® Points d'Attention Critiques

### D√©pendances √† Ne Pas Modifier
- React Native 0.79.x
- libVLC 3.6.5 (Android)
- MobileVLCKit 4.0.0a2 (iOS)

### Fichiers Sensibles
- [android/src/main/java/com/vlcpro/VLCPlayerView.java](mdc:android/src/main/java/com/vlcpro/VLCPlayerView.java) - Headers HTTP impl√©ment√©s
- [ios/VLCPro/VLCPlayerView.swift](mdc:ios/VLCPro/VLCPlayerView.swift) - Bridge iOS fonctionnel
- [src/types/index.ts](mdc:src/types/index.ts) - Exports publics

### Standards de Qualit√©
- Maintenir 65+ tests passants
- Z√©ro erreur ESLint/TypeScript
- Documentation JSDoc obligatoire
- Mise √† jour [PLANNING.md](mdc:PLANNING.md) syst√©matique

## üìû Communication

### Utilisation d'interactive_feedback
```typescript
// Pour toute question ou validation
mcp_interactive-feedback_interactive_feedback({
  project_directory: "/Users/jerome/Projects/react-native-vlc-pro",
  summary: "Description concise des changements effectu√©s"
})
```

### Format de Mise √† Jour PLANNING.md
```markdown
- **NOUVEAU** : [Description de la fonctionnalit√© impl√©ment√©e]
- Progression : X% ‚Üí Y% (Phase Z)
- Prochaines √©tapes : [Liste mise √† jour]
```

## üéØ Objectif Final

Livrer un lecteur VLC professionnel pour React Native avec :
- ‚úÖ Support complet des formats et protocoles
- üöß Interface utilisateur moderne et interactive
- üìã Gestion des pistes audio/sous-titres
- ‚úÖ Documentation compl√®te
- üöß Tests de compatibilit√© valid√©s

**Dur√©e estim√©e** : 3-5 sessions de d√©veloppement
**Livrable** : Package NPM pr√™t pour publication
