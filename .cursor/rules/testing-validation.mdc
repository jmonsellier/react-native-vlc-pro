---
description:
globs:
alwaysApply: false
---
# Tests et Validation - Guide Complet

## ‚úÖ Tests Actuels (65/65 passants)

### Tests Unitaires
**Commande** : `npm test`
**R√©sultat attendu** : 65/65 tests passants ‚úÖ

**Couverture estim√©e** :
- Composants : ~85%
- Hooks : ~90%
- Utilitaires : ~95%
- Types : 100%

### Tests de Streaming
**Script** : [scripts/test-streaming.js](mdc:scripts/test-streaming.js)
**Commande** : `node scripts/test-streaming.js`
**R√©sultat** : 100% de r√©ussite (5/5 sources valides) ‚úÖ

**Sources valid√©es** :
1. MP4 Standard - Big Buck Bunny
2. HLS Stream - Apple Test
3. DASH Stream - Akamai
4. WebM Video
5. Headers Test - httpbin.org

## üß™ Tests de Compatibilit√©

### ‚è≥ Tests sur Appareils R√©els (√Ä faire)
**Objectif** : Valider les exemples sur vrais appareils

**Applications √† tester** :
- [example/AdvancedPlayerExample.tsx](mdc:example/AdvancedPlayerExample.tsx)
- [example/StreamingExamples.tsx](mdc:example/StreamingExamples.tsx)

**Plateformes cibles** :
- Android Emulator (API 21+)
- iOS Simulator (iOS 12+)
- Appareils physiques

**Crit√®res de validation** :
- [ ] Application se lance sans crash
- [ ] Lecture vid√©o fonctionnelle
- [ ] Contr√¥les r√©actifs
- [ ] Headers HTTP fonctionnels
- [ ] Streaming HLS/DASH op√©rationnel

### üìä M√©triques de Performance
**√Ä mesurer** :
- Temps de d√©marrage de lecture < 2s
- Utilisation m√©moire stable
- Pas de fuites m√©moire
- Fluidit√© des animations UI

## üîç Tests de R√©gression

### Commandes de V√©rification
```bash
# Tests obligatoires avant chaque commit
npm test                           # Tests unitaires
npm run lint                       # Linting ESLint
npm run type-check                 # V√©rification TypeScript
node scripts/test-streaming.js     # Validation streaming
npm run build                      # Compilation
```

### Points de Contr√¥le
**Avant modification** :
- [ ] Tous les tests passent (65/65)
- [ ] Aucune erreur de lint
- [ ] Compilation TypeScript r√©ussie
- [ ] Sources de streaming valides

**Apr√®s modification** :
- [ ] Tests toujours passants
- [ ] Nouveaux tests ajout√©s si n√©cessaire
- [ ] Documentation mise √† jour
- [ ] [PLANNING.md](mdc:PLANNING.md) actualis√©

## üéØ Tests d'Int√©gration

### ‚úÖ Tests Composants
**Fichiers test√©s** :
- [src/components/VLCPlayer.tsx](mdc:src/components/VLCPlayer.tsx)
- [src/components/VideoControls.tsx](mdc:src/components/VideoControls.tsx)
- [src/components/VLCPlayerNative.tsx](mdc:src/components/VLCPlayerNative.tsx)

### ‚úÖ Tests Hooks
**Hook test√©** :
- [src/hooks/useVLCPlayer.ts](mdc:src/hooks/useVLCPlayer.ts)

### ‚úÖ Tests Utilitaires
**Fonctions test√©es** :
- [src/utils/formatTime.ts](mdc:src/utils/formatTime.ts)
- Validation des types [src/types/Media.ts](mdc:src/types/Media.ts)

## üìã Tests √Ä Ajouter

### Tests Manquants
1. **Tests E2E** - Sc√©narios complets utilisateur
2. **Tests de Performance** - M√©triques automatis√©es
3. **Tests de Stress** - Lecture longue dur√©e
4. **Tests R√©seau** - Conditions d√©grad√©es

### Nouveaux Composants
**Quand cr√©√©s, ajouter tests pour** :
- `src/components/ProgressBar.tsx`
- `src/components/VolumeControl.tsx`
- `src/hooks/useVideoControls.ts`

## üö® Tests de S√©curit√©

### Validation des URLs
**Impl√©ment√© dans** : [scripts/test-streaming.js](mdc:scripts/test-streaming.js)

**V√©rifications** :
- Format URL valide
- Protocoles autoris√©s (http, https, rtmp, rtsp)
- Pas d'injection de code
- Headers s√©curis√©s

### Tests d'Authentification
**√Ä valider** :
- Headers Authorization corrects
- Gestion des tokens expir√©s
- Protection des credentials
- Validation des certificats SSL

## üìà M√©triques de Qualit√©

### Objectifs Actuels
- **Tests unitaires** : 65+ tests passants ‚úÖ
- **Couverture de code** : 85%+ (estim√©) ‚úÖ
- **Erreurs de lint** : 0 ‚úÖ
- **Erreurs TypeScript** : 0 ‚úÖ

### Objectifs Futurs
- **Tests E2E** : 10+ sc√©narios
- **Performance** : < 2s d√©marrage
- **M√©moire** : < 100MB utilisation
- **Compatibilit√©** : iOS 12+ / Android API 21+

## üîß Configuration des Tests

### Jest Configuration
**Fichier** : `jest.config.js` (si pr√©sent)
**Setup** : Tests configur√©s pour React Native + TypeScript

### ESLint Rules
**Fichier** : `.eslintrc.js`
**Standards** : TypeScript strict, React hooks

### TypeScript Config
**Fichier** : `tsconfig.json`
**Mode** : Strict avec v√©rifications compl√®tes

## üìä Rapports de Tests

### G√©n√©ration de Rapports
```bash
# Rapport de couverture
npm test -- --coverage

# Rapport de streaming
node scripts/test-streaming.js > test-results/streaming-report.txt

# Rapport de build
npm run build 2>&1 | tee test-results/build-report.txt
```

### Localisation des Rapports
- **Tests unitaires** : Console + coverage/
- **Tests streaming** : `test-results/streaming-test-report.json`
- **Logs de build** : Console

## üéØ Validation Continue

### Hooks Git (Recommand√©)
```bash
# Pre-commit hook
#!/bin/sh
npm test && npm run lint && npm run type-check
```

### CI/CD (√Ä configurer)
**Pipeline sugg√©r√©** :
1. Tests unitaires
2. Tests de lint
3. Build Android/iOS
4. Tests sur √©mulateurs
5. Tests de performance

### Monitoring
**M√©triques √† surveiller** :
- Temps d'ex√©cution des tests
- Taille du bundle
- Performance de lecture
- Utilisation m√©moire
