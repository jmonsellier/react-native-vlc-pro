---
description:
globs:
alwaysApply: false
---
# Guidelines de test - React Native VLC Pro

## État actuel des tests
✅ **65 tests passent** - Couverture complète des composants, hooks et utilitaires

## Structure des tests

### Répertoire principal
**[__tests__/](mdc:__tests__)** - Suite de tests complète
- **components/** - Tests des composants React Native
- **hooks/** - Tests des hooks personnalisés  
- **utils/** - Tests des fonctions utilitaires
- **integration/** - Tests d'intégration

## Types de tests

### Tests unitaires
- **Composants** : Rendu, props, événements
- **Hooks** : État, effets, callbacks
- **Utilitaires** : Fonctions pures, formatage

### Tests d'intégration
- **Bridge natif** : Communication JS ↔ Native
- **Système de promesses** : Timeouts, gestion d'erreurs
- **Événements** : Émission et réception

## Outils de test

### Framework principal
- **Jest** - Runner de tests et assertions
- **React Native Testing Library** - Tests de composants
- **@testing-library/react-hooks** - Tests de hooks

### Configuration
- **jest.config.js** - Configuration Jest
- **setupTests.ts** - Setup global des tests
- **Mocks** - Mocks des modules natifs

## Patterns de test

### Tests de composants
```typescript
import { render, fireEvent } from '@testing-library/react-native';
import { VLCPlayer } from '../src';

test('should render VLCPlayer with source', () => {
  const { getByTestId } = render(
    <VLCPlayer 
      source={{ uri: 'test.mp4' }}
      testID="vlc-player"
    />
  );
  expect(getByTestId('vlc-player')).toBeTruthy();
});
```

### Tests de hooks
```typescript
import { renderHook, act } from '@testing-library/react-hooks';
import { useVLCPlayer } from '../src';

test('should initialize player with source', () => {
  const { result } = renderHook(() => 
    useVLCPlayer({ source: { uri: 'test.mp4' } })
  );
  
  expect(result.current.player).toBeDefined();
  expect(result.current.controls).toBeDefined();
});
```

### Tests d'utilitaires
```typescript
import { formatTime } from '../src/utils';

test('should format time correctly', () => {
  expect(formatTime(0)).toBe('00:00');
  expect(formatTime(61000)).toBe('01:01');
  expect(formatTime(3661000)).toBe('01:01:01');
});
```

## Mocks des modules natifs

### UIManager mock
```typescript
jest.mock('react-native', () => ({
  UIManager: {
    dispatchViewManagerCommand: jest.fn(),
  },
  requireNativeComponent: jest.fn(() => 'VLCPlayerView'),
}));
```

### Événements natifs mock
```typescript
const mockNativeEvent = (eventName: string, data: any) => ({
  nativeEvent: data,
  target: 1,
  type: eventName,
});
```

## Couverture de code

### Objectifs
- **Composants** : 100% des lignes critiques
- **Hooks** : 100% des branches logiques
- **Utilitaires** : 100% des fonctions
- **Global** : > 85% de couverture

### Métriques actuelles
- **Tests passants** : 65/65 ✅
- **Couverture estimée** : ~85%
- **Erreurs** : 0
- **Warnings** : 0

## Tests de régression

### Avant chaque commit
```bash
npm test                    # Tous les tests
npm run lint               # Vérification ESLint
npm run type-check         # Vérification TypeScript
```

### Tests de performance
- **Temps de rendu** : < 100ms pour les composants
- **Mémoire** : Pas de fuites détectées
- **Événements** : Réponse < 50ms

## Tests des modules natifs

### Stratégie de test
- **Mocks** pour les tests unitaires JS
- **Tests d'intégration** sur émulateurs/simulateurs
- **Tests E2E** sur vrais appareils

### Scénarios critiques
1. **Lecture de base** : play/pause/stop
2. **Méthodes d'information** : getCurrentTime, getDuration, etc.
3. **Gestion d'erreurs** : Sources invalides, timeouts
4. **Navigation temporelle** : seekForward, seekBackward

## Prochains tests à ajouter

### Phase 1, Semaine 4
1. **Tests de formats** : MP4, MKV, AVI, MOV
2. **Tests de streaming** : HLS, DASH, RTMP
3. **Tests d'authentification** : Headers HTTP

### Phase 2
1. **Tests de sous-titres** : SRT, VTT, ASS
2. **Tests de pistes audio** : Multi-langue
3. **Tests de performance** : Mémoire, CPU

## Commandes utiles

```bash
# Tests complets
npm test

# Tests avec couverture
npm test -- --coverage

# Tests en mode watch
npm test -- --watch

# Tests spécifiques
npm test -- --testNamePattern="VLCPlayer"

# Tests verbeux
npm test -- --verbose
```
