---
description:
globs:
alwaysApply: false
---
# Streaming et Headers HTTP - Guide d'ImplÃ©mentation

## ðŸ“º FonctionnalitÃ©s de Streaming ImplÃ©mentÃ©es

### âœ… Support des Formats
RÃ©fÃ©rence : [src/types/Media.ts](mdc:src/types/Media.ts)

**Formats supportÃ©s** :
- MP4, AVI, MKV, MOV, FLV, WebM
- HLS (HTTP Live Streaming) - `.m3u8`
- DASH (Dynamic Adaptive Streaming) - `.mpd`
- RTMP, RTSP pour streaming en temps rÃ©el

### âœ… Headers HTTP (Android)
ImplÃ©mentation : [android/src/main/java/com/vlcpro/VLCPlayerView.java](mdc:android/src/main/java/com/vlcpro/VLCPlayerView.java)

**Headers supportÃ©s** :
- `User-Agent` â†’ `:http-user-agent`
- `Authorization` â†’ `:http-password`
- `Referer` â†’ `:http-referrer`
- `Cookie` â†’ `:http-cookies`
- Headers personnalisÃ©s â†’ `:http-forward-cookies`

### âœ… Exemples d'Utilisation
RÃ©fÃ©rence : [example/StreamingExamples.tsx](mdc:example/StreamingExamples.tsx)

```typescript
// Exemple avec headers d'authentification
<VLCPlayer
  source={{
    uri: 'https://example.com/protected-stream.m3u8',
    headers: {
      'Authorization': 'Basic dXNlcjpwYXNz',
      'User-Agent': 'ReactNativeVLCPro/1.0'
    }
  }}
/>
```

## ðŸ§ª Tests de Validation

### Script de Test AutomatisÃ©
Fichier : [scripts/test-streaming.js](mdc:scripts/test-streaming.js)

**Sources de test validÃ©es** :
1. MP4 Standard - Big Buck Bunny âœ…
2. HLS Stream - Apple Test âœ…
3. DASH Stream - Akamai âœ…
4. WebM Video âœ…
5. Headers Test - httpbin.org âœ…

**Commande** : `node scripts/test-streaming.js`
**RÃ©sultat attendu** : 100% de rÃ©ussite (5/5 sources valides)

## ðŸ“– Documentation
Guide complet : [docs/STREAMING_GUIDE.md](mdc:docs/STREAMING_GUIDE.md)

**Sections couvertes** :
- Formats et protocoles supportÃ©s
- Authentification HTTP (Basic, Bearer, Cookies)
- Configuration avancÃ©e VLC
- Exemples d'applications
- Gestion des erreurs
- Optimisation des performances

## ðŸ”„ Prochaines Ã‰tapes

### iOS Headers Support
**TODO** : ImplÃ©menter le support des headers HTTP dans [ios/VLCPro/VLCPlayerView.swift](mdc:ios/VLCPro/VLCPlayerView.swift)

```swift
// Ã€ ajouter dans loadMedia(from source:)
if let headers = source["headers"] as? [String: String] {
    for (key, value) in headers {
        media?.addOption("\(key)=\(value)")
    }
}
```

### Tests sur Appareils RÃ©els
**Objectif** : Valider les exemples [example/StreamingExamples.tsx](mdc:example/StreamingExamples.tsx) et [example/AdvancedPlayerExample.tsx](mdc:example/AdvancedPlayerExample.tsx) sur :
- Ã‰mulateur Android
- Simulateur iOS
- Appareils physiques

### MÃ©triques de Performance
**Ã€ implÃ©menter** :
- Temps de dÃ©marrage de stream
- Utilisation mÃ©moire pendant le streaming
- Gestion des interruptions rÃ©seau
- QualitÃ© adaptative (HLS/DASH)
